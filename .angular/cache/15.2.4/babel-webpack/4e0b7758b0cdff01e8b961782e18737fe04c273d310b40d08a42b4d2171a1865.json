{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"https://node.tamayouz-lab.com\";\n  }\n  get(endpoint, options) {\n    const url = this.baseUrl + endpoint;\n    return this.http.get(url).pipe(retry(2), catchError(this.handleError));\n  }\n  post(endpoint, data, options) {\n    const url = this.baseUrl + endpoint;\n    return this.http.post(url, data).pipe(retry(2), catchError(this.handleError));\n  }\n  put(endpoint, data, options) {\n    const url = this.baseUrl + endpoint;\n    return this.http.put(url, data).pipe(retry(2), catchError(this.handleError));\n  }\n  delete(endpoint, options) {\n    const url = this.baseUrl + endpoint;\n    return this.http.delete(url).pipe(retry(2), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = \"An unknown error occurred\";\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\n Message: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;;;AAKlD,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEhB,YAAO,GAAG,+BAA+B;EAFV;EAIvCC,GAAG,CAAIC,QAAgB,EAAEC,OAAqB;IAC5C,MAAMC,GAAG,GAAG,IAAI,CAACC,OAAO,GAAGH,QAAQ;IACnC,OAAO,IAAI,CAACF,IAAI,CAACC,GAAG,CAAIG,GAAG,CAAC,CAACE,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAAC;EAC3E;EACAC,IAAI,CACFN,QAAgB,EAChBO,IAAS,EACTN,OAAqB;IAErB,MAAMC,GAAG,GAAG,IAAI,CAACC,OAAO,GAAGH,QAAQ;IACnC,OAAO,IAAI,CAACF,IAAI,CACbQ,IAAI,CAAIJ,GAAG,EAAEK,IAAI,CAAC,CAClBH,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAAC;EACjD;EAEAG,GAAG,CAAIR,QAAgB,EAAEO,IAAS,EAAEN,OAAqB;IACvD,MAAMC,GAAG,GAAG,IAAI,CAACC,OAAO,GAAGH,QAAQ;IACnC,OAAO,IAAI,CAACF,IAAI,CACbU,GAAG,CAAIN,GAAG,EAAEK,IAAI,CAAC,CACjBH,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAAC;EACjD;EAEAI,MAAM,CAAIT,QAAgB,EAAEC,OAAqB;IAC/C,MAAMC,GAAG,GAAG,IAAI,CAACC,OAAO,GAAGH,QAAQ;IACnC,OAAO,IAAI,CAACF,IAAI,CACbW,MAAM,CAAIP,GAAG,CAAC,CACdE,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAAC;EACjD;EAEQA,WAAW,CAACK,KAAwB;IAC1C,IAAIC,YAAY,GAAG,2BAA2B;IAC9C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACG,OAAO,EAAE;;IAE1EE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOlB,UAAU,CAACkB,YAAY,CAAC;EACjC;;AA7CWf,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAoB,SAAVpB,UAAU;EAAAqB,YAFT;AAAM","names":["throwError","catchError","retry","ApiService","constructor","http","get","endpoint","options","url","baseUrl","pipe","handleError","post","data","put","delete","error","errorMessage","ErrorEvent","message","status","console","factory","providedIn"],"sourceRoot":"","sources":["/Users/petersalah/Documents/GitHub/frontend/src/app/administration/services/api.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { HttpOptions } from \"src/app/models/IHttp-options\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ApiService {\n  constructor(private http: HttpClient) {}\n\n  private baseUrl = \"https://node.tamayouz-lab.com\";\n\n  get<T>(endpoint: string, options?: HttpOptions): Observable<T> {\n    const url = this.baseUrl + endpoint;\n    return this.http.get<T>(url).pipe(retry(2), catchError(this.handleError));\n  }\n  post<T>(\n    endpoint: string,\n    data: any,\n    options?: HttpOptions\n  ): Observable<T> | Observable<T> {\n    const url = this.baseUrl + endpoint;\n    return this.http\n      .post<T>(url, data)\n      .pipe(retry(2), catchError(this.handleError));\n  }\n\n  put<T>(endpoint: string, data: any, options?: HttpOptions): Observable<T> {\n    const url = this.baseUrl + endpoint;\n    return this.http\n      .put<T>(url, data)\n      .pipe(retry(2), catchError(this.handleError));\n  }\n\n  delete<T>(endpoint: string, options?: HttpOptions): Observable<T> {\n    const url = this.baseUrl + endpoint;\n    return this.http\n      .delete<T>(url)\n      .pipe(retry(2), catchError(this.handleError));\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = \"An unknown error occurred\";\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\n Message: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}